import requests
import time
import hashlib
import os
from dotenv import load_dotenv


load_dotenv()
API_KEY = os.getenv("VT_API_KEY")
HEADERS = {"x-apikey": API_KEY}
VT_UPLOAD_URL = "https://www.virustotal.com/api/v3/files"
VT_FILE_LOOKUP_URL = "https://www.virustotal.com/api/v3/files/"
VT_ANALYSIS_URL = "https://www.virustotal.com/api/v3/analyses/"

def get_sha256(filepath):
    """Calculate SHA-256 hash of the file."""
    sha256 = hashlib.sha256()
    with open(filepath, "rb") as f:
        for block in iter(lambda: f.read(4096), b""):
            sha256.update(block)
    return sha256.hexdigest()

def check_existing_report(file_hash):
    """Check if file was previously scanned."""
    response = requests.get(VT_FILE_LOOKUP_URL + file_hash, headers=HEADERS)
    if response.status_code == 200:
        print("[✓] File already analyzed. Fetching cached results...")
        data = response.json()["data"]["attributes"]["last_analysis_stats"]
        print_results(data)
        return True
    return False

def upload_file(filepath):
    """Upload file to VirusTotal."""
    with open(filepath, "rb") as file:
        files = {"file": (os.path.basename(filepath), file)}
        response = requests.post(VT_UPLOAD_URL, files=files, headers=HEADERS)
    if response.status_code == 200:
        return response.json()["data"]["id"]
    else:
        print("[✗] Upload failed:", response.text)
        return None

def fetch_results(analysis_id, retries=10):
    """Poll for results with short delay and retry limit."""
    for attempt in range(retries):
        response = requests.get(VT_ANALYSIS_URL + analysis_id, headers=HEADERS)
        if response.status_code == 200:
            data = response.json()["data"]
            if data["attributes"]["status"] == "completed":
                stats = data["attributes"]["stats"]
                print_results(stats)
                return
        time.sleep(2)  # shorter wait
    print("[!] Timed out waiting for results.")

def print_results(stats):
    print("\n--- Scan Summary ---")
    for key, val in stats.items():
        print(f"{key.capitalize()}: {val}")

def scan_file(filepath):
    if not os.path.isfile(filepath):
        print("[✗] File not found:", filepath)
        return

    print(f"[~] Scanning: {filepath}")
    file_hash = get_sha256(filepath)

    if not check_existing_report(file_hash):
        analysis_id = upload_file(filepath)
        if analysis_id:
            fetch_results(analysis_id)

# Example
if __name__ == "__main__":
    scan_file("C:\\Users\\Halse\\Downloads\\python-3.13.3-amd64.exe")  # replace with your file
